{
  "manifest": {
    "name": "@langchain/openai",
    "version": "0.0.34",
    "description": "OpenAI integrations for LangChain.js",
    "type": "module",
    "engines": {
      "node": ">=18"
    },
    "main": "./index.js",
    "types": "./index.d.ts",
    "repository": {
      "type": "git",
      "url": "git@github.com:langchain-ai/langchainjs.git"
    },
    "homepage": "https://github.com/langchain-ai/langchainjs/tree/main/libs/langchain-openai/",
    "scripts": {
      "build": "yarn turbo:command build:internal --filter=@langchain/openai",
      "build:internal": "yarn lc-build:v2 --create-entrypoints --pre --tree-shaking",
      "build:deps": "yarn run turbo:command build --filter=@langchain/core",
      "build:esm": "NODE_OPTIONS=--max-old-space-size=4096 tsc --outDir dist/",
      "build:cjs": "NODE_OPTIONS=--max-old-space-size=4096 tsc --outDir dist-cjs/ -p tsconfig.cjs.json && yarn move-cjs-to-dist && rimraf dist-cjs",
      "build:watch": "yarn create-entrypoints && tsc --outDir dist/ --watch",
      "build:scripts": "yarn create-entrypoints && yarn check-tree-shaking",
      "lint:eslint": "NODE_OPTIONS=--max-old-space-size=4096 eslint --cache --ext .ts,.js src/",
      "lint:dpdm": "dpdm --exit-code circular:1 --no-warning --no-tree src/*.ts src/**/*.ts",
      "lint": "yarn lint:eslint && yarn lint:dpdm",
      "lint:fix": "yarn lint:eslint --fix && yarn lint:dpdm",
      "clean": "rm -rf .turbo dist/",
      "prepack": "yarn build",
      "test": "yarn run build:deps && NODE_OPTIONS=--experimental-vm-modules jest --testPathIgnorePatterns=\\.int\\.test.ts --testTimeout 30000 --maxWorkers=50%",
      "test:watch": "yarn run build:deps && NODE_OPTIONS=--experimental-vm-modules jest --watch --testPathIgnorePatterns=\\.int\\.test.ts",
      "test:single": "yarn run build:deps && NODE_OPTIONS=--experimental-vm-modules yarn run jest --config jest.config.cjs --testTimeout 100000",
      "test:int": "NODE_OPTIONS=--experimental-vm-modules jest --testPathPattern=\\.int\\.test.ts --testTimeout 100000 --maxWorkers=50%",
      "format": "prettier --config .prettierrc --write \"src\"",
      "format:check": "prettier --config .prettierrc --check \"src\"",
      "move-cjs-to-dist": "yarn lc-build --config ./langchain.config.js --move-cjs-dist",
      "create-entrypoints": "yarn lc-build --config ./langchain.config.js --create-entrypoints",
      "check-tree-shaking": "yarn lc-build --config ./langchain.config.js --tree-shaking"
    },
    "author": {
      "name": "LangChain"
    },
    "license": "MIT",
    "dependencies": {
      "@langchain/core": ">0.1.56 <0.3.0",
      "js-tiktoken": "^1.0.12",
      "openai": "^4.41.1",
      "zod": "^3.22.4",
      "zod-to-json-schema": "^3.22.3"
    },
    "devDependencies": {
      "@azure/identity": "^4.2.0",
      "@jest/globals": "^29.5.0",
      "@langchain/scripts": "~0.0.14",
      "@swc/core": "^1.3.90",
      "@swc/jest": "^0.2.29",
      "dpdm": "^3.12.0",
      "eslint": "^8.33.0",
      "eslint-config-airbnb-base": "^15.0.0",
      "eslint-config-prettier": "^8.6.0",
      "eslint-plugin-import": "^2.27.5",
      "eslint-plugin-jest": "^27.6.0",
      "eslint-plugin-no-instanceof": "^1.0.1",
      "eslint-plugin-prettier": "^4.2.1",
      "jest": "^29.5.0",
      "jest-environment-node": "^29.6.4",
      "prettier": "^2.8.3",
      "release-it": "^15.10.1",
      "rimraf": "^5.0.1",
      "typescript": "~5.1.6"
    },
    "publishConfig": {
      "access": "public"
    },
    "keywords": [
      "llm",
      "ai",
      "gpt3",
      "chain",
      "prompt",
      "prompt engineering",
      "chatgpt",
      "machine learning",
      "ml",
      "openai",
      "embeddings",
      "vectorstores"
    ],
    "exports": {
      ".": {
        "types": {
          "import": "./index.d.ts",
          "require": "./index.d.cts",
          "default": "./index.d.ts"
        },
        "import": "./index.js",
        "require": "./index.cjs"
      },
      "./package.json": "./package.json"
    },
    "files": [
      "dist/",
      "index.cjs",
      "index.js",
      "index.d.ts",
      "index.d.cts"
    ],
    "_registry": "npm",
    "_loc": "/home/runner/ITACA-v31/.cache/yarn/v6/npm-@langchain-openai-0.0.34-36c9bca0721ab9f7e5d40927e7c0429cacbd5b56-integrity/node_modules/@langchain/openai/package.json",
    "readmeFilename": "README.md",
    "readme": "# @langchain/openai\n\nThis package contains the LangChain.js integrations for OpenAI through their SDK.\n\n## Installation\n\n```bash npm2yarn\nnpm install @langchain/openai\n```\n\nThis package, along with the main LangChain package, depends on [`@langchain/core`](https://npmjs.com/package/@langchain/core/).\nIf you are using this package with other LangChain packages, you should make sure that all of the packages depend on the same instance of @langchain/core.\nYou can do so by adding appropriate fields to your project's `package.json` like this:\n\n```json\n{\n  \"name\": \"your-project\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {\n    \"@langchain/openai\": \"^0.0.9\",\n    \"langchain\": \"0.0.207\"\n  },\n  \"resolutions\": {\n    \"@langchain/core\": \"0.1.5\"\n  },\n  \"overrides\": {\n    \"@langchain/core\": \"0.1.5\"\n  },\n  \"pnpm\": {\n    \"overrides\": {\n      \"@langchain/core\": \"0.1.5\"\n    }\n  }\n}\n```\n\nThe field you need depends on the package manager you're using, but we recommend adding a field for the common `yarn`, `npm`, and `pnpm` to maximize compatibility.\n\n## Chat Models\n\nThis package contains the `ChatOpenAI` class, which is the recommended way to interface with the OpenAI series of models.\n\nTo use, install the requirements, and configure your environment.\n\n```bash\nexport OPENAI_API_KEY=your-api-key\n```\n\nThen initialize\n\n```typescript\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nconst model = new ChatOpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  modelName: \"gpt-4-1106-preview\",\n});\nconst response = await model.invoke(new HumanMessage(\"Hello world!\"));\n```\n\n### Streaming\n\n```typescript\nimport { ChatOpenAI } from \"@langchain/openai\";\n\nconst model = new ChatOpenAI({\n  apiKey: process.env.OPENAI_API_KEY,\n  modelName: \"gpt-4-1106-preview\",\n});\nconst response = await model.stream(new HumanMessage(\"Hello world!\"));\n```\n\n## Embeddings\n\nThis package also adds support for OpenAI's embeddings model.\n\n```typescript\nimport { OpenAIEmbeddings } from \"@langchain/openai\";\n\nconst embeddings = new OpenAIEmbeddings({\n  apiKey: process.env.OPENAI_API_KEY,\n});\nconst res = await embeddings.embedQuery(\"Hello world\");\n```\n\n## Development\n\nTo develop the OpenAI package, you'll need to follow these instructions:\n\n### Install dependencies\n\n```bash\nyarn install\n```\n\n### Build the package\n\n```bash\nyarn build\n```\n\nOr from the repo root:\n\n```bash\nyarn build --filter=@langchain/openai\n```\n\n### Run tests\n\nTest files should live within a `tests/` file in the `src/` folder. Unit tests should end in `.test.ts` and integration tests should\nend in `.int.test.ts`:\n\n```bash\n$ yarn test\n$ yarn test:int\n```\n\n### Lint & Format\n\nRun the linter & formatter to ensure your code is up to standard:\n\n```bash\nyarn lint && yarn format\n```\n\n### Adding new entrypoints\n\nIf you add a new file to be exported, either import & re-export from `src/index.ts`, or add it to the `entrypoints` field in the `config` variable located inside `langchain.config.js` and run `yarn build` to generate the new entrypoint.\n",
    "licenseText": "The MIT License\n\nCopyright (c) Harrison Chase\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@langchain/openai/-/openai-0.0.34.tgz#36c9bca0721ab9f7e5d40927e7c0429cacbd5b56",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@langchain/openai/-/openai-0.0.34.tgz",
    "hash": "36c9bca0721ab9f7e5d40927e7c0429cacbd5b56",
    "integrity": "sha512-M+CW4oXle5fdoz2T2SwdOef8pl3/1XmUx1vjn2mXUVM/128aO0l23FMF0SNBsAbRV6P+p/TuzjodchJbi0Ht/A==",
    "registry": "npm",
    "packageName": "@langchain/openai",
    "cacheIntegrity": "sha512-M+CW4oXle5fdoz2T2SwdOef8pl3/1XmUx1vjn2mXUVM/128aO0l23FMF0SNBsAbRV6P+p/TuzjodchJbi0Ht/A== sha1-Nsm8oHIauffl1Akn58BCnKy9W1Y="
  },
  "registry": "npm",
  "hash": "36c9bca0721ab9f7e5d40927e7c0429cacbd5b56"
}