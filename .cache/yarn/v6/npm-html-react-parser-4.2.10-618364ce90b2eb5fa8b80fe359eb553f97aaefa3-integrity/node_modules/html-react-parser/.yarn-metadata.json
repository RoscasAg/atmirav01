{
  "manifest": {
    "name": "html-react-parser",
    "version": "4.2.10",
    "description": "HTML to React parser.",
    "author": {
      "name": "Mark",
      "email": "mark@remarkablemark.org"
    },
    "main": "index.js",
    "module": "index.mjs",
    "exports": {
      ".": {
        "types": "./index.d.ts",
        "import": "./index.mjs",
        "require": "./index.js"
      },
      "./lib/*": {
        "types": "./lib/*.d.ts",
        "default": "./lib/*.js"
      },
      "./package.json": "./package.json"
    },
    "scripts": {
      "benchmark": "node benchmark",
      "build": "rollup --config --failAfterWarnings",
      "clean": "rimraf dist",
      "lint": "eslint --ignore-path .gitignore --ignore-pattern /examples/ .",
      "lint:dts": "dtslint .",
      "lint:fix": "npm run lint -- --fix",
      "_postinstall": "husky install",
      "postpublish": "pinst --enable",
      "prepublishOnly": "pinst --disable && npm run lint && npm run lint:dts && npm run test:ci && npm run clean && npm run build",
      "size-limit": "size-limit",
      "test": "jest --coverage --testPathIgnorePatterns test/integration/",
      "test:ci": "npm test -- --ci --colors",
      "test:esm": "node --test test/esm",
      "test:integration": "npm run build && jest --env=jsdom test/integration/",
      "test:watch": "npm test -- --watch"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/remarkablemark/html-react-parser"
    },
    "bugs": {
      "url": "https://github.com/remarkablemark/html-react-parser/issues"
    },
    "keywords": [
      "html-react-parser",
      "html",
      "react",
      "parser",
      "dom"
    ],
    "dependencies": {
      "domhandler": "5.0.3",
      "html-dom-parser": "5.0.3",
      "react-property": "2.0.2",
      "style-to-js": "1.1.8"
    },
    "devDependencies": {
      "@commitlint/cli": "18.2.0",
      "@commitlint/config-conventional": "18.1.0",
      "@definitelytyped/dtslint": "0.0.182",
      "@rollup/plugin-commonjs": "25.0.7",
      "@rollup/plugin-node-resolve": "15.2.3",
      "@rollup/plugin-terser": "0.4.4",
      "@size-limit/preset-big-lib": "10.0.1",
      "@types/react": "18.2.33",
      "@typescript-eslint/eslint-plugin": "6.9.0",
      "@typescript-eslint/parser": "6.9.0",
      "benchmark": "2.1.4",
      "eslint": "8.52.0",
      "eslint-plugin-prettier": "5.0.1",
      "husky": "8.0.3",
      "jest": "29.7.0",
      "jest-environment-jsdom": "29.7.0",
      "lint-staged": "15.0.2",
      "pinst": "3.0.0",
      "preact": "10.18.1",
      "react": "18.2.0",
      "react-dom": "18.2.0",
      "rimraf": "5.0.5",
      "rollup": "4.1.4",
      "size-limit": "10.0.1",
      "typescript": "5.2.2"
    },
    "peerDependencies": {
      "react": "0.14 || 15 || 16 || 17 || 18"
    },
    "files": [
      "/dist",
      "/lib",
      "index.d.ts",
      "index.mjs"
    ],
    "collective": {
      "type": "opencollective",
      "url": "https://opencollective.com/html-react-parser"
    },
    "license": "MIT",
    "_registry": "npm",
    "_loc": "/home/runner/ITACA-v31/.cache/yarn/v6/npm-html-react-parser-4.2.10-618364ce90b2eb5fa8b80fe359eb553f97aaefa3-integrity/node_modules/html-react-parser/package.json",
    "readmeFilename": "README.md",
    "readme": "# html-react-parser\n\n[![NPM](https://nodei.co/npm/html-react-parser.png)](https://nodei.co/npm/html-react-parser/)\n\n[![NPM version](https://badgen.net/npm/v/html-react-parser)](https://www.npmjs.com/package/html-react-parser)\n[![Bundlephobia minified + gzip](https://badgen.net/bundlephobia/minzip/html-react-parser)](https://bundlephobia.com/package/html-react-parser)\n[![Build Status](https://github.com/remarkablemark/html-react-parser/workflows/build/badge.svg?branch=master)](https://github.com/remarkablemark/html-react-parser/actions?query=workflow%3Abuild)\n[![codecov](https://codecov.io/gh/remarkablemark/html-react-parser/branch/master/graph/badge.svg?token=wosFd1DBIR)](https://codecov.io/gh/remarkablemark/html-react-parser)\n[![NPM downloads](https://badgen.net/npm/dm/html-react-parser)](https://www.npmjs.com/package/html-react-parser)\n[![Discord](https://img.shields.io/discord/422421589582282752.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2)](https://discord.gg/njExwXdrRJ)\n\nHTML to React parser that works on both the server (Node.js) and the client (browser):\n\n```\nHTMLReactParser(string[, options])\n```\n\nThe parser converts an HTML string to one or more [React elements](https://reactjs.org/docs/react-api.html#creating-react-elements).\n\nTo replace an element with another element, check out the [`replace`](#replace) option.\n\n#### Example\n\n```js\nconst parse = require('html-react-parser');\nparse('<p>Hello, World!</p>'); // React.createElement('p', {}, 'Hello, World!')\n```\n\n[Replit](https://replit.com/@remarkablemark/html-react-parser) | [JSFiddle](https://jsfiddle.net/remarkablemark/7v86d800/) | [CodeSandbox](https://codesandbox.io/s/940pov1l4w) | [TypeScript](https://codesandbox.io/s/html-react-parser-z0kp6) | [Examples](https://github.com/remarkablemark/html-react-parser/tree/master/examples)\n\n<details>\n<summary>Table of Contents</summary>\n\n- [Install](#install)\n- [Usage](#usage)\n  - [replace](#replace)\n    - [replace with TypeScript](#replace-with-typescript)\n    - [replace element and children](#replace-element-and-children)\n    - [replace element attributes](#replace-element-attributes)\n    - [replace and remove element](#replace-and-remove-element)\n  - [transform](#transform)\n  - [library](#library)\n  - [htmlparser2](#htmlparser2)\n  - [trim](#trim)\n- [Migration](#migration)\n  - [v4](#v4)\n  - [v3](#v3)\n  - [v2](#v2)\n  - [v1](#v1)\n- [FAQ](#faq)\n  - [Is this XSS safe?](#is-this-xss-safe)\n  - [Does invalid HTML get sanitized?](#does-invalid-html-get-sanitized)\n  - [Are `<script>` tags parsed?](#are-script-tags-parsed)\n  - [Attributes aren't getting called](#attributes-arent-getting-called)\n  - [Parser throws an error](#parser-throws-an-error)\n  - [Is SSR supported?](#is-ssr-supported)\n  - [Elements aren't nested correctly](#elements-arent-nested-correctly)\n  - [Don't change case of tags](#dont-change-case-of-tags)\n  - [TS Error: Property 'attribs' does not exist on type 'DOMNode'](#ts-error-property-attribs-does-not-exist-on-type-domnode)\n  - [Can I enable `trim` for certain elements?](#can-i-enable-trim-for-certain-elements)\n  - [Webpack build warnings](#webpack-build-warnings)\n  - [TypeScript error](#typescript-error)\n- [Performance](#performance)\n- [Contributors](#contributors)\n  - [Code Contributors](#code-contributors)\n  - [Financial Contributors](#financial-contributors)\n    - [Individuals](#individuals)\n    - [Organizations](#organizations)\n- [Support](#support)\n- [License](#license)\n\n</details>\n\n## Install\n\n[NPM](https://www.npmjs.com/package/html-react-parser):\n\n```sh\nnpm install html-react-parser --save\n```\n\n[Yarn](https://yarnpkg.com/package/html-react-parser):\n\n```sh\nyarn add html-react-parser\n```\n\n[CDN](https://unpkg.com/html-react-parser/):\n\n```html\n<!-- HTMLReactParser depends on React -->\n<script src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>\n<script src=\"https://unpkg.com/html-react-parser@latest/dist/html-react-parser.min.js\"></script>\n<script>\n  window.HTMLReactParser(/* string */);\n</script>\n```\n\n## Usage\n\nImport ES module:\n\n```js\nimport parse from 'html-react-parser';\n```\n\nOr require CommonJS module:\n\n```js\nconst parse = require('html-react-parser');\n```\n\nParse single element:\n\n```js\nparse('<h1>single</h1>');\n```\n\nParse multiple elements:\n\n```js\nparse('<li>Item 1</li><li>Item 2</li>');\n```\n\nMake sure to render parsed adjacent elements under a parent element:\n\n```jsx\n<ul>\n  {parse(`\n    <li>Item 1</li>\n    <li>Item 2</li>\n  `)}\n</ul>\n```\n\nParse nested elements:\n\n```js\nparse('<body><p>Lorem ipsum</p></body>');\n```\n\nParse element with attributes:\n\n```js\nparse(\n  '<hr id=\"foo\" class=\"bar\" data-attr=\"baz\" custom=\"qux\" style=\"top:42px;\">'\n);\n```\n\n### replace\n\nThe `replace` option allows you to replace an element with another element.\n\nThe `replace` callback's first argument is [domhandler](https://github.com/fb55/domhandler#example)'s node:\n\n```js\nparse('<br>', {\n  replace: (domNode) => {\n    console.dir(domNode, { depth: null });\n  }\n});\n```\n\n<details>\n<summary>Console output</summary>\n<p>\n\n```js\nElement {\n  type: 'tag',\n  parent: null,\n  prev: null,\n  next: null,\n  startIndex: null,\n  endIndex: null,\n  children: [],\n  name: 'br',\n  attribs: {}\n}\n```\n\n</p>\n</details>\n\nThe element is replaced if a **valid** React element is returned:\n\n```jsx\nparse('<p id=\"replace\">text</p>', {\n  replace: (domNode) => {\n    if (domNode.attribs && domNode.attribs.id === 'replace') {\n      return <span>replaced</span>;\n    }\n  }\n});\n```\n\n#### replace with TypeScript\n\nFor TypeScript projects, you may need to check that `domNode` is an instance of domhandler's `Element`:\n\n```tsx\nimport { HTMLReactParserOptions, Element } from 'html-react-parser';\n\nconst options: HTMLReactParserOptions = {\n  replace: (domNode) => {\n    if (domNode instanceof Element && domNode.attribs) {\n      // ...\n    }\n  }\n};\n```\n\nIf you're having issues take a look at our [Create React App example](./examples/create-react-app-typescript/src/App.tsx).\n\n#### replace element and children\n\nReplace the element and its children (see [demo](https://replit.com/@remarkablemark/html-react-parser-replace-example)):\n\n```jsx\nimport parse, { domToReact } from 'html-react-parser';\n\nconst html = `\n  <p id=\"main\">\n    <span class=\"prettify\">\n      keep me and make me pretty!\n    </span>\n  </p>\n`;\n\nconst options = {\n  replace: ({ attribs, children }) => {\n    if (!attribs) {\n      return;\n    }\n\n    if (attribs.id === 'main') {\n      return <h1 style={{ fontSize: 42 }}>{domToReact(children, options)}</h1>;\n    }\n\n    if (attribs.class === 'prettify') {\n      return (\n        <span style={{ color: 'hotpink' }}>\n          {domToReact(children, options)}\n        </span>\n      );\n    }\n  }\n};\n\nparse(html, options);\n```\n\n<details>\n<summary>HTML output</summary>\n<p>\n\n<!-- prettier-ignore-start -->\n\n```html\n<h1 style=\"font-size:42px\">\n  <span style=\"color:hotpink\">\n    keep me and make me pretty!\n  </span>\n</h1>\n```\n\n<!-- prettier-ignore-end -->\n\n</p>\n</details>\n\n#### replace element attributes\n\nConvert DOM attributes to React props with `attributesToProps`:\n\n```jsx\nimport parse, { attributesToProps } from 'html-react-parser';\n\nconst html = `\n  <main class=\"prettify\" style=\"background: #fff; text-align: center;\" />\n`;\n\nconst options = {\n  replace: (domNode) => {\n    if (domNode.attribs && domNode.name === 'main') {\n      const props = attributesToProps(domNode.attribs);\n      return <div {...props} />;\n    }\n  }\n};\n\nparse(html, options);\n```\n\n<details>\n<summary>HTML output</summary>\n<p>\n\n```html\n<div class=\"prettify\" style=\"background:#fff;text-align:center\"></div>\n```\n\n</p>\n</details>\n\n#### replace and remove element\n\n[Exclude](https://replit.com/@remarkablemark/html-react-parser-56) an element from rendering by replacing it with `<React.Fragment>`:\n\n```jsx\nparse('<p><br id=\"remove\"></p>', {\n  replace: ({ attribs }) => attribs && attribs.id === 'remove' && <></>\n});\n```\n\n<details>\n<summary>HTML output</summary>\n<p>\n\n```html\n<p></p>\n```\n\n</p>\n</details>\n\n### transform\n\nThe `transform` option allows you to transform each element individually after it's parsed.\n\nThe `transform` callback's first argument is the React element:\n\n```jsx\nparse('<br>', {\n  transform: (reactNode, domNode, index) => {\n    // this will wrap every element in a div\n    return <div>{reactNode}</div>;\n  }\n});\n```\n\n### library\n\nThe `library` option specifies the UI library. The default library is **React**.\n\nTo use Preact:\n\n```js\nparse('<br>', {\n  library: require('preact')\n});\n```\n\nOr a custom library:\n\n```js\nparse('<br>', {\n  library: {\n    cloneElement: () => {\n      /* ... */\n    },\n    createElement: () => {\n      /* ... */\n    },\n    isValidElement: () => {\n      /* ... */\n    }\n  }\n});\n```\n\n### htmlparser2\n\n> **Warning**: `htmlparser2` options _**do not** work on the client-side_ (browser) and the options _**only work** on the server-side_ (Node.js). By overriding the options, it could cause universal rendering to break.\n\nDefault [htmlparser2 options](https://github.com/fb55/htmlparser2/wiki/Parser-options#option-xmlmode) can be overridden in >=[0.12.0](https://github.com/remarkablemark/html-react-parser/tree/v0.12.0).\n\nTo enable [`xmlMode`](https://github.com/fb55/htmlparser2/wiki/Parser-options#option-xmlmode):\n\n```js\nparse('<p /><p />', {\n  htmlparser2: {\n    xmlMode: true\n  }\n});\n```\n\n### trim\n\nBy default, whitespace is preserved:\n\n```js\nparse('<br>\\n'); // [React.createElement('br'), '\\n']\n```\n\nBut certain elements like `<table>` will strip out invalid whitespace:\n\n```js\nparse('<table>\\n</table>'); // React.createElement('table')\n```\n\nTo remove whitespace, enable the `trim` option:\n\n```js\nparse('<br>\\n', { trim: true }); // React.createElement('br')\n```\n\nHowever, intentional whitespace may be stripped out:\n\n```js\nparse('<p> </p>', { trim: true }); // React.createElement('p')\n```\n\n## Migration\n\n### v4\n\n[htmlparser2](https://github.com/fb55/htmlparser2) has been upgraded to [v9](https://github.com/fb55/htmlparser2/releases/tag/v9.0.0).\n\n### v3\n\n[domhandler](https://github.com/fb55/domhandler) has been upgraded to v5 so some [parser options](https://github.com/fb55/htmlparser2/wiki/Parser-options) like `normalizeWhitespace` have been removed.\n\nAlso, it's recommended to upgrade to the latest version of [TypeScript](https://www.npmjs.com/package/typescript).\n\n### v2\n\nSince [v2.0.0](https://github.com/remarkablemark/html-react-parser/releases/tag/v2.0.0), Internet Explorer (IE) is no longer supported.\n\n### v1\n\nTypeScript projects will need to update the types in [v1.0.0](https://github.com/remarkablemark/html-react-parser/releases/tag/v1.0.0).\n\nFor the `replace` option, you may need to do the following:\n\n```tsx\nimport { Element } from 'domhandler/lib/node';\n\nparse('<br class=\"remove\">', {\n  replace: (domNode) => {\n    if (domNode instanceof Element && domNode.attribs.class === 'remove') {\n      return <></>;\n    }\n  }\n});\n```\n\nSince [v1.1.1](https://github.com/remarkablemark/html-react-parser/releases/tag/v1.1.1), Internet Explorer 9 (IE9) is no longer supported.\n\n## FAQ\n\n### Is this XSS safe?\n\nNo, this library is _**not**_ [XSS (cross-site scripting)](https://wikipedia.org/wiki/Cross-site_scripting) safe. See [#94](https://github.com/remarkablemark/html-react-parser/issues/94).\n\n### Does invalid HTML get sanitized?\n\nNo, this library does _**not**_ sanitize HTML. See [#124](https://github.com/remarkablemark/html-react-parser/issues/124), [#125](https://github.com/remarkablemark/html-react-parser/issues/125), and [#141](https://github.com/remarkablemark/html-react-parser/issues/141).\n\n### Are `<script>` tags parsed?\n\nAlthough `<script>` tags and their contents are rendered on the server-side, they're not evaluated on the client-side. See [#98](https://github.com/remarkablemark/html-react-parser/issues/98).\n\n### Attributes aren't getting called\n\nThe reason why your HTML attributes aren't getting called is because [inline event handlers](https://developer.mozilla.org/docs/Web/Guide/Events/Event_handlers) (e.g., `onclick`) are parsed as a _string_ rather than a _function_. See [#73](https://github.com/remarkablemark/html-react-parser/issues/73).\n\n### Parser throws an error\n\nIf the parser throws an error, check if your arguments are valid. See [\"Does invalid HTML get sanitized?\"](#does-invalid-html-get-sanitized).\n\n### Is SSR supported?\n\nYes, server-side rendering on Node.js is supported by this library. See [demo](https://replit.com/@remarkablemark/html-react-parser-SSR).\n\n### Elements aren't nested correctly\n\nIf your elements are nested incorrectly, check to make sure your [HTML markup is valid](https://validator.w3.org/). The HTML to DOM parsing will be affected if you're using self-closing syntax (`/>`) on non-void elements:\n\n```js\nparse('<div /><div />'); // returns single element instead of array of elements\n```\n\nSee [#158](https://github.com/remarkablemark/html-react-parser/issues/158).\n\n### Don't change case of tags\n\nTags are lowercased by default. To prevent that from happening, pass the [htmlparser2 option](#htmlparser2):\n\n```js\nconst options = {\n  htmlparser2: {\n    lowerCaseTags: false\n  }\n};\nparse('<CustomElement>', options); // React.createElement('CustomElement')\n```\n\n> **Warning**: By preserving case-sensitivity of the tags, you may get rendering warnings like:\n>\n> ```\n> Warning: <CustomElement> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.\n> ```\n\nSee [#62](https://github.com/remarkablemark/html-react-parser/issues/62) and [example](https://replit.com/@remarkablemark/html-react-parser-62).\n\n### TS Error: Property 'attribs' does not exist on type 'DOMNode'\n\nThe TypeScript error occurs because `DOMNode` needs to be an instance of domhandler's `Element`. See [migration](#migration) or [#199](https://github.com/remarkablemark/html-react-parser/issues/199).\n\n### Can I enable `trim` for certain elements?\n\nYes, you can enable or disable [`trim`](#trim) for certain elements using the [`replace`](#replace) option. See [#205](https://github.com/remarkablemark/html-react-parser/issues/205).\n\n### Webpack build warnings\n\nIf you see the Webpack build warning:\n\n```\nexport 'default' (imported as 'parse') was not found in 'html-react-parser'\n```\n\nThen update your Webpack config to:\n\n```js\n// webpack.config.js\nmodule.exports = {\n  // ...\n  resolve: {\n    mainFields: ['browser', 'main', 'module']\n  }\n};\n```\n\nSee [#238](https://github.com/remarkablemark/html-react-parser/issues/238) and [#213](https://github.com/remarkablemark/html-react-parser/issues/213).\n\n### TypeScript error\n\nIf you see the TypeScript error:\n\n```\nnode_modules/htmlparser2/lib/index.d.ts:2:23 - error TS1005: ',' expected.\n\n2 export { Parser, type ParserOptions };\n                        ~~~~~~~~~~~~~\n```\n\nThen upgrade to the latest version of [typescript](https://www.npmjs.com/package/typescript). See [#748](https://github.com/remarkablemark/html-react-parser/issues/748).\n\n## Performance\n\nRun benchmark:\n\n```sh\nnpm run test:benchmark\n```\n\nOutput of benchmark run on MacBook Pro 2017:\n\n```\nhtml-to-react - Single x 415,186 ops/sec ±0.92% (85 runs sampled)\nhtml-to-react - Multiple x 139,780 ops/sec ±2.32% (87 runs sampled)\nhtml-to-react - Complex x 8,118 ops/sec ±2.99% (82 runs sampled)\n```\n\nRun [Size Limit](https://github.com/ai/size-limit):\n\n```sh\nnpx size-limit\n```\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](https://github.com/remarkablemark/html-react-parser/blob/master/.github/CONTRIBUTING.md)].\n\n[![Code Contributors](https://opencollective.com/html-react-parser/contributors.svg?width=890&button=false)](https://github.com/remarkablemark/html-react-parser/graphs/contributors)\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/html-react-parser/contribute)]\n\n#### Individuals\n\n[![Financial Contributors - Individuals](https://opencollective.com/html-react-parser/individuals.svg?width=890)](https://opencollective.com/html-react-parser)\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/html-react-parser/contribute)]\n\n[![Financial Contributors - Organization 0](https://opencollective.com/html-react-parser/organization/0/avatar.svg)](https://opencollective.com/html-react-parser/organization/0/website)\n[![Financial Contributors - Organization 1](https://opencollective.com/html-react-parser/organization/1/avatar.svg)](https://opencollective.com/html-react-parser/organization/1/website)\n[![Financial Contributors - Organization 2](https://opencollective.com/html-react-parser/organization/2/avatar.svg)](https://opencollective.com/html-react-parser/organization/2/website)\n[![Financial Contributors - Organization 3](https://opencollective.com/html-react-parser/organization/3/avatar.svg)](https://opencollective.com/html-react-parser/organization/3/website)\n[![Financial Contributors - Organization 4](https://opencollective.com/html-react-parser/organization/4/avatar.svg)](https://opencollective.com/html-react-parser/organization/4/website)\n[![Financial Contributors - Organization 5](https://opencollective.com/html-react-parser/organization/5/avatar.svg)](https://opencollective.com/html-react-parser/organization/5/website)\n[![Financial Contributors - Organization 6](https://opencollective.com/html-react-parser/organization/6/avatar.svg)](https://opencollective.com/html-react-parser/organization/6/website)\n[![Financial Contributors - Organization 7](https://opencollective.com/html-react-parser/organization/7/avatar.svg)](https://opencollective.com/html-react-parser/organization/7/website)\n[![Financial Contributors - Organization 8](https://opencollective.com/html-react-parser/organization/8/avatar.svg)](https://opencollective.com/html-react-parser/organization/8/website)\n[![Financial Contributors - Organization 9](https://opencollective.com/html-react-parser/organization/9/avatar.svg)](https://opencollective.com/html-react-parser/organization/9/website)\n\n## Support\n\n- [GitHub Sponsors](https://b.remarkabl.org/github-sponsors)\n- [Open Collective](https://b.remarkabl.org/open-collective-html-react-parser)\n- [Tidelift](https://b.remarkabl.org/tidelift-html-react-parser)\n- [Patreon](https://b.remarkabl.org/patreon)\n- [Ko-fi](https://b.remarkabl.org/ko-fi)\n- [Liberapay](https://b.remarkabl.org/liberapay)\n- [Teespring](https://b.remarkabl.org/teespring)\n\n## License\n\n[MIT](https://github.com/remarkablemark/html-react-parser/blob/master/LICENSE)\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2016 Menglin \"Mark\" Xu <mark@remarkablemark.org>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/html-react-parser/-/html-react-parser-4.2.10.tgz#618364ce90b2eb5fa8b80fe359eb553f97aaefa3",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/html-react-parser/-/html-react-parser-4.2.10.tgz",
    "hash": "618364ce90b2eb5fa8b80fe359eb553f97aaefa3",
    "integrity": "sha512-JyKZVQ+kQ8PdycISwkuLbEEvV/k4hWhU6cb6TT7yGaYwdqA7cPt4VRYXkCZcix2vlQtgDBSMJUmPI2jpNjPGvg==",
    "registry": "npm",
    "packageName": "html-react-parser",
    "cacheIntegrity": "sha512-JyKZVQ+kQ8PdycISwkuLbEEvV/k4hWhU6cb6TT7yGaYwdqA7cPt4VRYXkCZcix2vlQtgDBSMJUmPI2jpNjPGvg== sha1-YYNkzpCy61+ouA/jWetVP5eq76M="
  },
  "registry": "npm",
  "hash": "618364ce90b2eb5fa8b80fe359eb553f97aaefa3"
}