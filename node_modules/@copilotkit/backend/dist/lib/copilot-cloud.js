"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/lib/copilot-cloud.ts
var copilot_cloud_exports = {};
__export(copilot_cloud_exports, {
  CopilotCloud: () => CopilotCloud,
  RemoteCopilotCloud: () => RemoteCopilotCloud
});
module.exports = __toCommonJS(copilot_cloud_exports);
var import_shared = require("@copilotkit/shared");
var CopilotCloud = class {
};
var RemoteCopilotCloud = class extends CopilotCloud {
  constructor(cloudApiUrl = import_shared.COPILOT_CLOUD_API_URL) {
    super();
    this.cloudApiUrl = cloudApiUrl;
  }
  async checkGuardrailsInput({
    cloud,
    publicApiKey,
    messages
  }) {
    const url = `${this.cloudApiUrl}/${import_shared.COPILOT_CLOUD_VERSION}/copilotkit/guardrails/input`;
    const response = await fetch(url, {
      method: "PUT",
      headers: {
        "Content-Type": "application/json",
        [import_shared.COPILOT_CLOUD_PUBLIC_API_KEY_HEADER]: publicApiKey
      },
      body: JSON.stringify({ messages, cloud })
    });
    if (!response.ok) {
      let message = response.statusText;
      try {
        const json2 = await response.json();
        if (json2.message) {
          message = json2.message;
        }
      } catch (error) {
      }
      throw new Error("Failed to check input guardrails: " + message);
    }
    const json = await response.json();
    return { status: json.status, reason: json.reason };
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  CopilotCloud,
  RemoteCopilotCloud
});
//# sourceMappingURL=copilot-cloud.js.map